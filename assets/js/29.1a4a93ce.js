(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{514:function(v,_,t){"use strict";t.r(_);var a=t(2),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"痛点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#痛点"}},[v._v("#")]),v._v(" 痛点")]),v._v(" "),t("p",[v._v("我认为微服务拆分困境产生的根本原因就是不知道业务或者微服务的边界到底在什么地方")]),v._v(" "),t("h2",{attrs:{id:"核心思想"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心思想"}},[v._v("#")]),v._v(" 核心思想")]),v._v(" "),t("p",[v._v("DDD 核心思想是通过领域驱动设计方法定义领域模型，从而确定业务和应用边界，保证业务模型与代码模型的一致性。")]),v._v(" "),t("h2",{attrs:{id:"是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[v._v("#")]),v._v(" 是什么")]),v._v(" "),t("p",[v._v("DDD 是一种处理高度复杂领域的设计思想，它试图分离技术实现的复杂性，并围绕业务概念构建领域模型来控制业务的复杂性，以解决软件难以理解，难以演进的问题。DDD 不是架构，而是一种架构设计方法论，它通过边界划分将复杂业务领域简单化，帮我们设计出清晰的领域和应用边界，可以很容易地实现架构演进。")]),v._v(" "),t("h2",{attrs:{id:"ddd-包括战略设计和战术设计两部分。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ddd-包括战略设计和战术设计两部分。"}},[v._v("#")]),v._v(" DDD 包括战略设计和战术设计两部分。")]),v._v(" "),t("p",[v._v("战略设计主要从业务视角出发，建立业务领域模型，划分领域边界，建立通用语言的限界上下文，限界上下文可以作为微服务设计的参考边界。")]),v._v(" "),t("p",[v._v("战术设计则从技术视角出发，侧重于领域模型的技术实现，完成软件开发和落地，包括：聚合根、实体、值对象、领域服务、应用服务和资源库等代码逻辑的设计和实现。")]),v._v(" "),t("h2",{attrs:{id:"怎么做"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么做"}},[v._v("#")]),v._v(" 怎么做")]),v._v(" "),t("p",[v._v("DDD 战略设计会建立领域模型，领域模型可以用于指导微服务的设计和拆分。事件风暴是建立领域模型的主要方法，它是一个从发散到收敛的过程。它通常采用用例分析、场景分析和用户旅程分析，尽可能全面不遗漏地分解业务领域，并梳理领域对象之间的关系，这是一个发散的过程。事件风暴过程会产生很多的实体、命令、事件等领域对象，我们将这些领域对象从不同的维度进行聚类，形成如聚合、限界上下文等边界，建立领域模型，这就是一个收敛的过程。")]),v._v(" "),t("p",[v._v("我们可以用三步来划定领域模型和微服务的边界。")]),v._v(" "),t("p",[v._v("第一步：在事件风暴中梳理业务过程中的用户操作、事件以及外部依赖关系等，根据这些要素梳理出领域实体等领域对象。")]),v._v(" "),t("p",[v._v("第二步：根据领域实体之间的业务关联性，将业务紧密相关的实体进行组合形成聚合，同时确定聚合中的聚合根、值对象和实体。在这个图里，聚合之间的边界是第一层边界，它们在同一个微服务实例中运行，这个边界是逻辑边界，所以用虚线表示。")]),v._v(" "),t("p",[v._v("第三步：根据业务及语义边界等因素，将一个或者多个聚合划定在一个限界上下文内，形成领域模型。在这个图里，限界上下文之间的边界是第二层边界，这一层边界可能就是未来微服务的边界，不同限界上下文内的领域逻辑被隔离在不同的微服务实例中运行，物理上相互隔离，所以是物理边界，边界之间用实线来表示。")]),v._v(" "),t("h2",{attrs:{id:"与微服务的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与微服务的关系"}},[v._v("#")]),v._v(" 与微服务的关系")]),v._v(" "),t("p",[v._v("DDD 与微服务的关系有了上面的讲解，现在我们不妨再次总结下 DDD 与微服务的关系。")]),v._v(" "),t("p",[v._v("DDD 是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高响应力，而从业务视角去分离应用系统建设复杂度的手段。两者都强调从业务出发，其核心要义是强调根据业务发展，合理划分领域边界，持续调整现有架构，优化现有代码，以保持架构和代码的生命力，也就是我们常说的演进式架构。")]),v._v(" "),t("p",[v._v("DDD 主要关注：从业务领域视角划分领域边界，构建通用语言进行高效沟通，通过业务抽象，建立领域模型，维持业务和代码的逻辑一致性。")]),v._v(" "),t("p",[v._v("微服务主要关注：运行时的进程间通信、容错和故障隔离，实现去中心化数据管理和去中心化服务治理，关注微服务的独立开发、测试、构建和部署")]),v._v(" "),t("h2",{attrs:{id:"概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[v._v("#")]),v._v(" 概念")]),v._v(" "),t("p",[t("strong",[v._v("领域")]),v._v("：领域具体指一种特定的"),t("strong",[v._v("范围")]),v._v("或"),t("strong",[v._v("区域")]),v._v("。")]),v._v(" "),t("ul",[t("li",[v._v("DDD 的领域就是这个边界内要解决的业务问题域。")])]),v._v(" "),t("p",[t("strong",[v._v("子域")]),v._v("：我们把划分出来的多个子领域称为子域，每个子域对应一个更小的问题域或更小的业务范围。")]),v._v(" "),t("p",[v._v("核心域：")]),v._v(" "),t("p",[v._v("通用域：")]),v._v(" "),t("p",[v._v("支撑域：")]),v._v(" "),t("p",[v._v("通用语言：")]),v._v(" "),t("p",[v._v("限界上下文：")]),v._v(" "),t("p",[v._v("聚合：")]),v._v(" "),t("p",[v._v("聚合根：")]),v._v(" "),t("p",[v._v("实体：")]),v._v(" "),t("p",[v._v("值对象：")])])}),[],!1,null,null,null);_.default=s.exports}}]);