(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{498:function(v,_,t){"use strict";t.r(_);var a=t(4),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"编程的实质"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程的实质"}},[v._v("#")]),v._v(" 编程的实质")]),v._v(" "),t("p",[v._v("目的：用来解决现实世界的问题")]),v._v(" "),t("p",[v._v("编程的过程：在计算机所能理解的模型和现实世界建立一种联系")]),v._v(" "),t("p",[v._v("编程语言是一种抽象机制，问题是对谁进行抽象")]),v._v(" "),t("h3",{attrs:{id:"什么是对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是对象"}},[v._v("#")]),v._v(" 什么是对象")]),v._v(" "),t("p",[v._v("状态")]),v._v(" "),t("p",[v._v("行为")]),v._v(" "),t("p",[v._v("标识")]),v._v(" "),t("h3",{attrs:{id:"特性："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性："}},[v._v("#")]),v._v(" 特性：")]),v._v(" "),t("p",[v._v("抽象")]),v._v(" "),t("p",[v._v("继承")]),v._v(" "),t("p",[v._v("分装")]),v._v(" "),t("p",[v._v("多态")]),v._v(" "),t("ul",[t("li",[v._v("运行期注入不同的子类表现出不同的形态")])]),v._v(" "),t("p",[v._v("面对象编程的本质")]),v._v(" "),t("ul",[t("li",[v._v("利用多态进行编程")])]),v._v(" "),t("h2",{attrs:{id:"框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[v._v("#")]),v._v(" 框架")]),v._v(" "),t("h3",{attrs:{id:"是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[v._v("#")]),v._v(" 是什么")]),v._v(" "),t("p",[v._v("用来实现某一类应用的结构性的程序，对某一类架构方法可复用的设计与实现")]),v._v(" "),t("h3",{attrs:{id:"好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[v._v("#")]),v._v(" 好处")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("简化开发")])]),v._v(" "),t("li",[t("p",[v._v("实现多种设计模式，使应用开发者不需要花太大力气就能设计出良好的程序来")])])]),v._v(" "),t("h3",{attrs:{id:"和工具的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#和工具的区别"}},[v._v("#")]),v._v(" 和工具的区别")]),v._v(" "),t("p",[v._v("框架调用应用程序")]),v._v(" "),t("p",[v._v("应用程序调用工具")]),v._v(" "),t("p",[t("strong",[v._v("软件设计的目的是使软件达到“强内聚，低耦合”，从而是软件：")])]),v._v(" "),t("ul",[t("li",[v._v("易于扩展")]),v._v(" "),t("li",[v._v("更强壮")]),v._v(" "),t("li",[v._v("可移植")]),v._v(" "),t("li",[v._v("更简单")])]),v._v(" "),t("h2",{attrs:{id:"设计原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[v._v("#")]),v._v(" 设计原则")]),v._v(" "),t("p",[v._v("原则一：开闭原则（OCP）")]),v._v(" "),t("p",[v._v("原则二：依赖倒置原则（DIP）/好莱坞原则")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("高层模块不能依赖底层模块，而是大家都依赖于抽象")])]),v._v(" "),t("li",[t("p",[v._v("抽象不能依赖实现，而是依赖抽象")]),v._v(" "),t("p",[v._v("eg: controller service,接口是为谁定制的，谁定义接口，")])]),v._v(" "),t("li",[t("p",[v._v("don't call me, I'll call you")])])]),v._v(" "),t("p",[v._v("原则三：里氏替换原则")]),v._v(" "),t("p",[v._v("原则四：单一职责原则")]),v._v(" "),t("p",[v._v("Akka 的 Actor")]),v._v(" "),t("h2",{attrs:{id:"设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[v._v("#")]),v._v(" 设计模式")])])}),[],!1,null,null,null);_.default=r.exports}}]);