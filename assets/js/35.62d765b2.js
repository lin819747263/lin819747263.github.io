(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{521:function(v,t,_){"use strict";_.r(t);var s=_(2),a=Object(s.a)({},(function(){var v=this,t=v.$createElement,_=v._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"什么是分布式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是分布式"}},[v._v("#")]),v._v(" 什么是分布式")]),v._v(" "),_("p",[v._v("分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是"),_("strong",[v._v("利用更多的机器，处理更多的数据")]),v._v("。")]),v._v(" "),_("h2",{attrs:{id:"理论基础"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#理论基础"}},[v._v("#")]),v._v(" 理论基础")]),v._v(" "),_("h3",{attrs:{id:"acid"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[v._v("#")]),v._v(" ACID")]),v._v(" "),_("p",[v._v("ACID，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。一个支持事务（Transaction）的数据库，必须要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求。")]),v._v(" "),_("p",[_("strong",[v._v("原子性（Atomicity）")])]),v._v(" "),_("p",[v._v("原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。")]),v._v(" "),_("p",[_("strong",[v._v("一致性（Consistency）")]),v._v("\n事务前后数据的完整性必须保持一致。")]),v._v(" "),_("p",[_("strong",[v._v("隔离性（Isolation）")]),v._v("\n事务的隔离性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离。")]),v._v(" "),_("p",[_("strong",[v._v("持久性（Durability）")]),v._v("\n持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对其有任何影响。")]),v._v(" "),_("p",[v._v("具有ACID的特性的数据库支持强一致性，强一致性代表数据库本身不会出现不一致，每个事务是原子的，或者成功或者失败，事物间是隔离的，互相完全不影响，而且最终状态是持久落盘的，因此，数据库会从一个明确的状态到另外一个明确的状态，中间的临时状态是不会出现的，如果出现也会及时的自动的修复，因此是强一致的")]),v._v(" "),_("h3",{attrs:{id:"base理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[v._v("#")]),v._v(" BASE理论")]),v._v(" "),_("p",[v._v("BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写，BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。")]),v._v(" "),_("p",[v._v("什么是基本可用呢？假设系统，出现了不可预知的故障，但还是能用，相比较正常的系统而言：")]),v._v(" "),_("ul",[_("li",[_("p",[_("strong",[v._v("-响应时间上的损失")]),v._v("：正常情况下的搜索引擎0.5秒即返回给用户结果，而基本可用的搜索引擎可以在2秒作用返回结果。")])]),v._v(" "),_("li",[_("p",[_("strong",[v._v("功能上的损失")]),v._v("：在一个电商网站上，正常情况下，用户可以顺利完成每一笔订单。但是到了大促期间，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。3.2. 软状态")])])]),v._v(" "),_("p",[v._v("什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种“硬状态”。")]),v._v(" "),_("p",[v._v("软状态指的是：允许系统中的数据存在中间状态，并认为该状态不影响系统的整体可用性，即允许系统在多个不同节点的数据副本存在数据延时。")]),v._v(" "),_("p",[v._v("3.3. 最终一致性")]),v._v(" "),_("p",[v._v("上面说软状态，然后不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保持数据一致性，从而达到数据的最终一致性。这个时间期限取决于网络延时、系统负载、数据复制方案设计等等因素。")]),v._v(" "),_("p",[v._v("而在实际工程实践中，最终一致性分为5种：")]),v._v(" "),_("p",[v._v("3.3.1. 因果一致性（Causal consistency）")]),v._v(" "),_("p",[v._v("因果一致性指的是：如果节点A在更新完某个数据后通知了节点B，那么节点B之后对该数据的访问和修改都是基于A更新后的值。于此同时，和节点A无因果关系的节点C的数据访问则没有这样的限制。")]),v._v(" "),_("p",[v._v("3.3.2. 读己之所写（Read your writes）")]),v._v(" "),_("p",[v._v("读己之所写指的是：节点A更新一个数据后，它自身总是能访问到自身更新过的最新值，而不会看到旧值。其实也算一种因果一致性。")]),v._v(" "),_("p",[v._v("3.3.3. 会话一致性（Session consistency）")]),v._v(" "),_("p",[v._v("会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现 “读己之所写” 的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。")]),v._v(" "),_("p",[v._v("3.3.4. 单调读一致性（Monotonic read consistency）")]),v._v(" "),_("p",[v._v("单调读一致性指的是：如果一个节点从系统中读取出一个数据项的某个值后，那么系统对于该节点后续的任何数据访问都不应该返回更旧的值。")]),v._v(" "),_("p",[v._v("3.3.5. 单调写一致性（Monotonic write consistency）")]),v._v(" "),_("p",[v._v("单调写一致性指的是：一个系统要能够保证来自同一个节点的写操作被顺序的执行。")]),v._v(" "),_("p",[v._v("在实际的实践中，这5种系统往往会结合使用，以构建一个具有最终一致性的分布式系统。")]),v._v(" "),_("p",[v._v("实际上，不只是分布式系统使用最终一致性，关系型数据库在某个功能上，也是使用最终一致性的。比如备份，数据库的复制过程是需要时间的，这个复制过程中，业务读取到的值就是旧的。当然，最终还是达成了数据一致性。这也算是一个最终一致性的经典案例。")]),v._v(" "),_("h3",{attrs:{id:"cap理论"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cap理论"}},[v._v("#")]),v._v(" CAP理论")]),v._v(" "),_("p",[v._v("CAP原则又称CAP定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。")]),v._v(" "),_("p",[v._v("CAP原则是NOSQL数据库的基石。")]),v._v(" "),_("p",[v._v("分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：")]),v._v(" "),_("ul",[_("li",[v._v("一致性（C）：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）")]),v._v(" "),_("li",[v._v("可用性（A）：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）")]),v._v(" "),_("li",[v._v("分区容忍性（P）：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择")])])])}),[],!1,null,null,null);t.default=a.exports}}]);